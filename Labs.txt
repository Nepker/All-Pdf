Lab for CORS
Lab#1 - CORD vulnerability with basic origin reflection
Target Goal - Exploit the CORS misconfiguration to retrieve the administrator's API key
Creds: Wiener:peter
Analysis:
Adding Origin: header in the request
Testing for CORS misconfigurations:
1.Change the origin to an arbitrary value / True




Lab #1 File Path traversal 
A path traversal vulnerability in display of product
  Use Burp Suite to intercept and modify a request that fetches a product image.
  Modify the filename parameter, giving it the value:   ../../../etc/passwd
  Observe that the response contains the contents of the /etc/passwd file.

Lab #2 File path traversal, traversal sequences blocked with absolute path bypass
 This lab contains a path traversal vulnerability in the display of product images.

The application blocks traversal sequences but treats the supplied filename as being relative to a default working directory.

To solve the lab, retrieve the contents of the /etc/passwd file. 
Use Burp Suite to intercept and modify a request that fetches a product image.
Modify the filename parameter, giving it the value /etc/passwd.
Observe that the response contains the contents of the /etc/passwd file.

Lab #3 File path traversal, traversal sequences stripped non-recursively
 This lab contains a path traversal vulnerability in the display of product images.

The application strips path traversal sequences from the user-supplied filename before using it.

To solve the lab, retrieve the contents of the /etc/passwd file. 
Solutions:


    Use Burp Suite to intercept and modify a request that fetches a product image.

    Modify the filename parameter, giving it the value:
    ....//....//....//etc/passwd
    Observe that the response contains the contents of the /etc/passwd file.

Lab #4 File path traversal, traversal sequences stripped with superfluous URL-decode

 This lab contains a path traversal vulnerability in the display of product images.

The application blocks input containing path traversal sequences. It then performs a URL-decode of the input before using it.

To solve the lab, retrieve the contents of the /etc/passwd file. 

Solution:
 	Encode ../../../ double time by url encoding

    Use Burp Suite to intercept and modify a request that fetches a product image.

    Modify the filename parameter, giving it the value:
    ..%252f..%252f..%252fetc/passwd
    Observe that the response contains the contents of the /etc/passwd file.
Lab #5 File path traversal, validation of start of path
 This lab contains a path traversal vulnerability in the display of product images.

The application transmits the full file path via a request parameter, and validates that the supplied path starts with the expected folder.

To solve the lab, retrieve the contents of the /etc/passwd file. 
Solutions:


    Use Burp Suite to intercept and modify a request that fetches a product image.

    Modify the filename parameter, giving it the value:
    /var/www/images/../../../etc/passwd
    Observe that the response contains the contents of the /etc/passwd file.

Lab #6 File path traversal, validation of file extension with null byte bypass
 This lab contains a path traversal vulnerability in the display of product images.

The application validates that the supplied filename ends with the expected file extension.

To solve the lab, retrieve the contents of the /etc/passwd file. 
Solutions:


    Use Burp Suite to intercept and modify a request that fetches a product image.

    Modify the filename parameter, giving it the value:
    ../../../etc/passwd%00.png
    Observe that the response contains the contents of the /etc/passwd file.

Lab #1 Basic clickjacking with csrf protection token
 This lab contains login functionality and a delete account button that is protected by a CSRF token. A user will click on elements that display the word "click" on a decoy website.

To solve the lab, craft some HTML that frames the account page and fools the user into deleting their account. The lab is solved when the account is deleted.

You can log in to your own account using the following credentials: wiener:peter
Note

The victim will be using Chrome so test your exploit on that browser.

Solutions:
Log in to your account on the target website.
Go to the exploit server and paste the following HTML template into the Body section:

<style>
    iframe {
        position:relative;
        width:$width_value;
        height: $height_value;
        opacity: $opacity;
        z-index: 2;
    }
    div {
        position:absolute;
        top:$top_value;
        left:$side_value;
        z-index: 1;
    }
</style>
<div>Test me</div>
<iframe src="YOUR-LAB-ID.web-security-academy.net/my-account"></iframe>

Make the following adjustments to the template:
Replace YOUR-LAB-ID in the iframe src attribute with your unique lab ID.
Substitute suitable pixel values for the $height_value and $width_value variables of the iframe (we suggest 700px and 500px respectively).
Substitute suitable pixel values for the $top_value and $side_value variables of the decoy web content so that the "Delete account" button and the "Test me" decoy action align (we suggest 300px and 60px respectively).
Set the opacity value $opacity to ensure that the target iframe is transparent. Initially, use an opacity of 0.1 so that you can align the iframe actions and adjust the position values as necessary. For the submitted attack a value of 0.0001 will work.
Click Store and then View exploit.
Hover over Test me and ensure the cursor changes to a hand indicating that the div element is positioned correctly. Do not actually click the "Delete account" button yourself. If you do, the lab will be broken and you will need to wait until it resets to try again (about 20 minutes). If the div does not line up properly, adjust the top and left properties of the style sheet.
Once you have the div element lined up correctly, change "Test me" to "Click me" and click Store.
Click on Deliver exploit to victim and the lab should be solved.


Lab:1 SQL injection vulnerability in WHERE clause allowing retrieval of hidden data

 This lab contains a SQL injection vulnerability in the product category filter. When the user selects a category, the application carries out a SQL query like the following:
SELECT * FROM products WHERE category = 'Gifts' AND released = 1

To solve the lab, perform a SQL injection attack that causes the application to display one or more unreleased products. 

Solutions:


    Use Burp Suite to intercept and modify the request that sets the product category filter.
    Modify the category parameter, giving it the value '+OR+1=1--
    Submit the request, and verify that the response now contains one or more unreleased products.


Lab:2 SQL injection vulnerability allowing login bypass
 This lab contains a SQL injection vulnerability in the login function.

To solve the lab, perform a SQL injection attack that logs in to the application as the administrator user. 

Solutions:


    Use Burp Suite to intercept and modify the login request.
    Modify the username parameter, giving it the value: administrator'--


Lab:3 SQL injection UNION attack, determining the number of columns returned by the query
 This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. The first step of such an attack is to determine the number of columns that are being returned by the query. You will then use this technique in subsequent labs to construct the full attack.

To solve the lab, determine the number of columns returned by the query by performing a SQL injection UNION attack that returns an additional row containing null values. 

Solutions:

    Use Burp Suite to intercept and modify the request that sets the product category filter.
    Modify the category parameter, giving it the value '+UNION+SELECT+NULL--. Observe that an error occurs.

    Modify the category parameter to add an additional column containing a null value:
    '+UNION+SELECT+NULL,NULL--
    Continue adding null values until the error disappears and the response includes additional content containing the null values.

Lab:4 SQL injection UNION attack, finding a column containing text
 This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you first need to determine the number of columns returned by the query. You can do this using a technique you learned in a previous lab. The next step is to identify a column that is compatible with string data.

The lab will provide a random value that you need to make appear within the query results. To solve the lab, perform a SQL injection UNION attack that returns an additional row containing the value provided. This technique helps you determine which columns are compatible with string data. 

Solutions:


    Use Burp Suite to intercept and modify the request that sets the product category filter.

    Determine the number of columns that are being returned by the query. Verify that the query is returning three columns, using the following payload in the category parameter:
    '+UNION+SELECT+NULL,NULL,NULL--

    Try replacing each null with the random value provided by the lab, for example:
    '+UNION+SELECT+'abcdef',NULL,NULL--
    If an error occurs, move on to the next null and try that instead.

Lab:5 SQL injection UNION attack, retrieving data from other tables
 This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you need to combine some of the techniques you learned in previous labs.

The database contains a different table called users, with columns called username and password.

To solve the lab, perform a SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the administrator user. 
Solutions:


    Use Burp Suite to intercept and modify the request that sets the product category filter.

    Determine the number of columns that are being returned by the query and which columns contain text data. Verify that the query is returning two columns, both of which contain text, using a payload like the following in the category parameter:
    '+UNION+SELECT+'abc','def'--

    Use the following payload to retrieve the contents of the users table:
    '+UNION+SELECT+username,+password+FROM+users--
    Verify that the application's response contains usernames and passwords.

Lab:6 SQL injection UNION attack, retrieving multiple values in a single column
 This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response so you can use a UNION attack to retrieve data from other tables.

The database contains a different table called users, with columns called username and password.

To solve the lab, perform a SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the administrator user. 

Solutions:


    Use Burp Suite to intercept and modify the request that sets the product category filter.

    Determine the number of columns that are being returned by the query and which columns contain text data. Verify that the query is returning two columns, only one of which contain text, using a payload like the following in the category parameter:
    '+UNION+SELECT+NULL,'abc'--

    Use the following payload to retrieve the contents of the users table:
    '+UNION+SELECT+NULL,username||'~'||password+FROM+users--
    Verify that the application's response contains usernames and passwords.

Lab:7 SQL injection attack, querying the database type and version on MySQL and Microsoft
 This lab contains a SQL injection vulnerability in the product category filter. You can use a UNION attack to retrieve the results from an injected query.

To solve the lab, display the database version string. 
Solutions:


    Use Burp Suite to intercept and modify the request that sets the product category filter.

    Determine the number of columns that are being returned by the query and which columns contain text data. Verify that the query is returning two columns, both of which contain text, using a payload like the following in the category parameter:
    '+UNION+SELECT+'abc','def'#

    Use the following payload to display the database version:
    '+UNION+SELECT+@@version,+NULL#

Lab:8 SQL injection attack, listing the database contents on non-Oracle databases
 This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response so you can use a UNION attack to retrieve data from other tables.

The application has a login function, and the database contains a table that holds usernames and passwords. You need to determine the name of this table and the columns it contains, then retrieve the contents of the table to obtain the username and password of all users.

To solve the lab, log in as the administrator user. 

Solutions:


    Use Burp Suite to intercept and modify the request that sets the product category filter.

    Determine the number of columns that are being returned by the query and which columns contain text data. Verify that the query is returning two columns, both of which contain text, using a payload like the following in the category parameter:
    '+UNION+SELECT+'abc','def'--

    Use the following payload to retrieve the list of tables in the database:
    '+UNION+SELECT+table_name,+NULL+FROM+information_schema.tables--
    Find the name of the table containing user credentials.

    Use the following payload (replacing the table name) to retrieve the details of the columns in the table:
    '+UNION+SELECT+column_name,+NULL+FROM+information_schema.columns+WHERE+table_name='users_abcdef'--
    Find the names of the columns containing usernames and passwords.

    Use the following payload (replacing the table and column names) to retrieve the usernames and passwords for all users:
    '+UNION+SELECT+username_abcdef,+password_abcdef+FROM+users_abcdef--
    Find the password for the administrator user, and use it to log in.



